

// PURPOSE: represents a brick breaker game
// TODO: create a better description
class BrickBreakerGame {

    // NOTE: DO NOT FORGET ABOUT PERFORMANCE

    // TODO: reforge borders
    // TODO: add generator for rows of blocks
    // TODO: add better edge collision for blocks
    // TODO: add a decition about initial ball trajectory launch before the main game loop
    //       platform moves left -> ball goes left etc.
    // TODO: add lose/win conditions
    //      TODO: add lifes
    //          TODO: change bottom border logic
    //      TODO: add score
    //          TODO: add counter
    // BIG TODO: if platform moves to the side when a ball touches it, then change 
    //           direction of the ball accordingly in direction of movement of the platform

    // objects of the game
    field Platform platform;
    field Ball ball;
    // list of bricks
    field array lob;

    // constants
    static int LEFT_BORDER, RIGHT_BORDER, TOP_BORDER, BOTTOM_BORDER;
    static int NUMBER_OF_BRICKS;


    // PURPOSE: constructs a new Brick Breaker game
    constructor BrickBreakerGame new() {

        do init();

        let platform = Platform.new(256, 220);
        let ball = Ball.new(256, 128);
        let lob = Array.new(NUMBER_OF_BRICKS);

        do createBricks();
        do drawBorders();

        return this;
    }


    // PURPOSE: initizlizes constants for a game
    // CHANGES: constants
    
    // TODO:    create better borders

    method void init() {
        
        let LEFT_BORDER = 10;
        let RIGHT_BORDER = 502;
        
        let TOP_BORDER = 10;
        let BOTTOM_BORDER = 230;

        let NUMBER_OF_BRICKS = 24; // in a single row
        
        return;
    }


    // PURPOSE: frees memory from a game
    // CHANGES: memory
    method void dispose() {

        do platform.dispose();
        do ball.dispose();

        do disposeBricks();
        do Memory.deAlloc(lob);

        do Memory.deAlloc(this);

        return;
    }


    // PURPOSE: creates bricks to break
    // CHANGES: lob

    // TODO:    create rows
    //          change x

    method void createBricks() {

        var int i;
        var int n;
        var int x;
        var int y;
        var int shift;

        let i = 0;
        let n = NUMBER_OF_BRICKS;
        let x = 17;
        let y = 70;
        let shift = 20;

        while (i < n) {
            let lob[i] = Brick.new(x, y);
            let x = x + shift;
            let i = i + 1; 
        }

        return;
    }


    // PURPOSE: disposes bricks inside list of bricks
    // CHANGES: memory
    method void disposeBricks() {

        var int n;
        var int i;
        var Brick brick;

        let n = 0;
        let i = NUMBER_OF_BRICKS;

        while (n < i) {
            let brick = lob[n];
            if (~(brick = null)) { do brick.dispose(); }
            let n = n + 1;
        }

        return;
    }


    // PURPOSE: draws borders of playgraound area on the screen
    // CHANGES: screen

    // NOTE: INCREASED PERFORMANCE WITH MEMORY PEEK POKE
    //    var int memAddress;
    //    var int n;
    //    var int i;
    //    
    //    let memAddress = 16384+512;
    //    let n = 1;
    //    let i = 31;
    //    
    //    while (n < i) {
    //        do Memory.poke(memAddress+n, -1);
    //        let n = n + 1;
    //    }

    // TODO:    create better borders

    method void drawBorders() {

        do Screen.setColor(true);
        do Screen.drawLine(8, 8, 504, 8);       // top border
        do Screen.drawLine(504, 8, 504, 232);   // right border
        do Screen.drawLine(8, 8, 8, 232);       // left border
        do Screen.drawLine(8, 232, 504, 232);   // bottom border
        
        return;
    }

    
    // PURPOSE: checks possible bounce between border lines and the ball
    // CHANGES: ball movement direction
    method void checkBorders() {
        
        if ( ball.getX1() = LEFT_BORDER )   { do ball.rightBounce(); } 
        if ( ball.getX2() = RIGHT_BORDER )  { do ball.leftBounce(); }  

        if ( ball.getY1() = TOP_BORDER )    { do ball.bottomBounce(); }  
        if ( ball.getY2() = BOTTOM_BORDER ) { do ball.topBounce(); } 
        
        return;
    }


    // PURPOSE: checks possible bounce between the platform and the ball
    // CHANGES: 
    method void checkPlatform() {

        var bool x_eq_check;
        var bool y_eq_check;

        let x_eq_check = (platform.getX1() = ball.getX1()) | (platform.getX2() = ball.getX2());
        let y_eq_check = platform.getY1() = ball.getY2();

        if (((x_eq_check | (ball.getX2() > platform.getX1())) & y_eq_check) &
            ((x_eq_check | (ball.getX1() < platform.getX2())) & y_eq_check))
            { do ball.topBounce(); }
            
        return;
    }


    // PURPOSE: checks possible bounce between a brick and the ball
    // RETURNS: bool

    // TODO: ADD X AND Y EQUALITY CHECK 
    // TODO: CREATE BETTER NAMES 

    method bool isBrickBounce(Brick brick) {

        var bool bounce;

        var bool x1_eq;
        var bool x2_eq;
        var bool y1_eq;
        var bool y2_eq;

        var bool x1_lesser;
        var bool y1_lesser;
        var bool x2_greater;
        var bool y2_greater;

        let bounce = false;
        
        let x1_eq = ball.getX1() = brick.getX2();
        let x2_eq = ball.getX2() = brick.getX1();
        let y1_eq = ball.getY1() = brick.getY2(); 
        let y2_eq = ball.getY2() = brick.getY1();

        let x1_lesser  = ball.getX1() < brick.getX2();
        let y1_lesser  = ball.getY1() < brick.getY2();
        let x2_greater = ball.getX2() > brick.getX1();
        let y2_greater = ball.getY2() > brick.getY1();

        if ((x1_lesser & y1_eq) & (x2_greater & y1_eq)) { let bounce = true; do ball.bottomBounce(); }
        if ((x1_lesser & y2_eq) & (x2_greater & y2_eq)) { let bounce = true; do ball.topBounce(); }
        if ((x2_eq * y1_lesser) & (x2_eq & y2_greater)) { let bounce = true; do ball.leftBounce(); }
        if ((x1_eq * y1_lesser) & (x1_eq & y2_greater)) { let bounce = true; do ball.rightBounce(); }
        
        return bounce;
    }


    // PURPOSE: checks every brick in lob for possible break
    // CHANGES: ball movement direction, lob, memory
    method void checkBricks() {

        var int i;
        var int n;
        var Brick brick;

        let n = 0;
        let i = NUMBER_OF_BRICKS;

        while (n < i) {

            let brick = lob[n];

            if ( ~(brick = null) ) {
                if (isBrickBounce(brick)) {
                    do brick.erase();
                    do brick.dispose();
                    let lob[n] = null;
                }
            }

            let n = n + 1;
        }

        return;
    }


    // PURPOSE: runs brick breaker game
    method void run() {
        
        var char key;
        var bool exit;

        let exit = false;

        while (~exit) {

            let key = Keyboard.keyPressed();

            do checkBorders();

            do checkPlatform();

            do checkBricks();
            
            do Sys.wait(20);
            
            do ball.move();

            if (key = 81)   { let exit = true; }                       // q
            if (key = 130)  { do platform.moveLeft(LEFT_BORDER); }     // left arrow
            if (key = 132)  { do platform.moveRight(RIGHT_BORDER); }   // right arrow

        }

        return;
    }


} // class