

// PURPOSE: represents a brick breaker game
// TODO: create a better description
class BrickBreakerGame {

    // NOTE: DO NOT FORGET ABOUT PERFORMANCE

    // TODO: move assets into other class
    // TODO: add lose/win conditions
    //      TODO: add lifes
    //          TODO: change bottom border logic
    //      TODO: add score
    //          TODO: add counter
    // TODO: move platform and ball to the middle of the screen
    // TODO: decrease game speed when brick is destroyed 
    // BIG TODO: if platform moves to the side when a ball touches it, then change 
    //           direction of the ball accordingly in direction of movement of the platform

    // objects of the game
    field Platform platform;
    field Ball ball;
    // list of bricks
    field array lob;

    // constants
    static int LEFT_BORDER, RIGHT_BORDER, TOP_BORDER, BOTTOM_BORDER;
    static int NUMBER_OF_BRICKS;


    // PURPOSE: constructs a new Brick Breaker game
    constructor BrickBreakerGame new() {

        do init();

        // https://www.dafont.com/vcr-osd-mono.font?back=bitmap
        do BrickBreakerGame.drawS(7168);
        do BrickBreakerGame.drawC(7169);
        do BrickBreakerGame.drawO(7170);
        do BrickBreakerGame.drawR(7171);
        do BrickBreakerGame.drawE(7172);
        do BrickBreakerGame.drawColon(7173);

        do BrickBreakerGame.draw0(7174);
        do BrickBreakerGame.draw1(7175);
        do BrickBreakerGame.draw2(7176);
        do BrickBreakerGame.draw3(7177);
        do BrickBreakerGame.draw4(7178);
        do BrickBreakerGame.draw5(7179);
        do BrickBreakerGame.draw6(7180);
        do BrickBreakerGame.draw7(7181);
        do BrickBreakerGame.draw8(7182);
        do BrickBreakerGame.draw9(7183);

        do BrickBreakerGame.drawL(7185);
        do BrickBreakerGame.drawI(7186);
        do BrickBreakerGame.drawF(7187);
        do BrickBreakerGame.drawE(7188);
        do BrickBreakerGame.drawS(7189);
        do BrickBreakerGame.drawColon(7190);
        do BrickBreakerGame.drawP(7191);

        do BrickBreakerGame.drawLeftArrow(4013);
        do BrickBreakerGame.drawO(4014);
        do BrickBreakerGame.drawV(4015);
        do BrickBreakerGame.drawSkull(4016);
        do BrickBreakerGame.drawE(4017);
        do BrickBreakerGame.drawR(4018);
        do BrickBreakerGame.drawRightArrow(4019);
        do BrickBreakerGame.drawCrown(4020);

        do drawBorders();

        let lob = Array.new(NUMBER_OF_BRICKS);
        do createBricks();

        let ball = Ball.new(254 + 15, BOTTOM_BORDER - 15);
        let platform = Platform.new(255, BOTTOM_BORDER - 10);

        return this;
    }


    // PURPOSE: initizlizes constants for a game
    // CHANGES: constants
    method void init() {
        
        let LEFT_BORDER = 49;
        let RIGHT_BORDER = 461;
        
        let TOP_BORDER = 49;
        let BOTTOM_BORDER = 200;

        let NUMBER_OF_BRICKS = 40; // TOTAL NUMBER OF BRICKS
        
        return;
    }


    // PURPOSE: frees memory from a game
    // CHANGES: memory
    method void dispose() {

        do platform.dispose();
        do ball.dispose();

        do disposeBricks();
        do Memory.deAlloc(lob);

        do Memory.deAlloc(this);

        return;
    }


    // PURPOSE: creates bricks to break
    // CHANGES: lob
    method void createBricks() {

        var int i;
        var int n;
        var int x;
        var int y;
        var int shift;

        let i = 0;
        let n = NUMBER_OF_BRICKS;
        let x = LEFT_BORDER + 8;
        let y = TOP_BORDER + 10;
        // distance between bricks by x1 coordinate
        let shift = 20;

        while (i < n) {
            // NOTE: hardcoded value of brick X size
            // next row of bricks
            if (x > (RIGHT_BORDER - 15)) { let x = LEFT_BORDER + 8; let y = y + 15; }

            let lob[i] = Brick.new(x, y);
            let x = x + shift;
            let i = i + 1; 
        }

        return;
    }


    // PURPOSE: disposes bricks inside list of bricks
    // CHANGES: memory
    method void disposeBricks() {

        var int n;
        var int i;
        var Brick brick;

        let n = 0;
        let i = NUMBER_OF_BRICKS;

        while (n < i) {
            let brick = lob[n];
            if (~(brick = null)) { do brick.dispose(); }
            let n = n + 1;
        }

        return;
    }


    // PURPOSE: draws borders of playgraound area on the screen
    // CHANGES: screen
    // NOTE: does repeat computations, but only once

    // NOTE: INCREASED PERFORMANCE WITH MEMORY PEEK POKE
    //    var int memAddress;
    //    var int n;
    //    var int i;
    //    
    //    let memAddress = 16384+512;
    //    let n = 1;
    //    let i = 31;
    //    
    //    while (n < i) {
    //        do Memory.poke(memAddress+n, -1);
    //        let n = n + 1;
    //    }

    method void drawBorders() {

        do Screen.setColor(true);
        do Screen.drawLine(LEFT_BORDER-1, TOP_BORDER-1, RIGHT_BORDER+1, TOP_BORDER-1);          // top border
        do Screen.drawLine(RIGHT_BORDER+1, TOP_BORDER-1, RIGHT_BORDER+1, BOTTOM_BORDER+1);      // right border
        do Screen.drawLine(LEFT_BORDER-1, TOP_BORDER-1, LEFT_BORDER-1, BOTTOM_BORDER+1);        // left border
        do Screen.drawLine(LEFT_BORDER-1, BOTTOM_BORDER+1, RIGHT_BORDER+1, BOTTOM_BORDER+1);    // bottom border
        
        return;
    }

    
    // PURPOSE: checks possible bounce between border lines and the ball
    // CHANGES: ball movement direction
    method void checkBorders() {
        
        if ( ball.getX1() = LEFT_BORDER )   { do ball.rightBounce(); } 
        if ( ball.getX2() = RIGHT_BORDER )  { do ball.leftBounce(); }  

        if ( ball.getY1() = TOP_BORDER )    { do ball.bottomBounce(); }  
        if ( ball.getY2() = BOTTOM_BORDER ) { do ball.topBounce(); } 
        
        return;
    }


    // PURPOSE: checks possible bounce between the platform and the ball
    // CHANGES: ball movement direction
    method void checkPlatform() {

        var bool x_eq;
        var bool y_eq;

        let x_eq = (ball.getX1() = platform.getX2()) | (ball.getX2() = platform.getX1());
        let y_eq = ball.getY2() = platform.getY1();

        if (((x_eq | (ball.getX2() > platform.getX1())) & y_eq) &
            ((x_eq | (ball.getX1() < platform.getX2())) & y_eq))
            { do ball.topBounce(); }
            
        return;
    }


    // PURPOSE: checks possible bounce between a brick and the ball
    // RETURNS: bool
    // CHANGES: ball movement direction
    method bool isBrickBounce(Brick brick) {

        var bool bounce;

        var bool x1_eq;
        var bool x2_eq;
        var bool y1_eq;
        var bool y2_eq;

        var bool x1_lesser;
        var bool y1_lesser;
        var bool x2_greater;
        var bool y2_greater;

        let bounce = false;
        
        let x1_eq = ball.getX1() = brick.getX2(); // left
        let x2_eq = ball.getX2() = brick.getX1(); // right
        let y1_eq = ball.getY1() = brick.getY2(); // bottom
        let y2_eq = ball.getY2() = brick.getY1(); // top

        let x1_lesser  = ball.getX1() < brick.getX2();
        let y1_lesser  = ball.getY1() < brick.getY2();
        let x2_greater = ball.getX2() > brick.getX1();
        let y2_greater = ball.getY2() > brick.getY1();

        if ((x1_lesser & y1_eq) & (x2_greater & y1_eq)) { let bounce = true; do ball.bottomBounce(); } // bottom side
        if ((x1_lesser & y2_eq) & (x2_greater & y2_eq)) { let bounce = true; do ball.topBounce(); }
        if ((x2_eq & y1_lesser) & (x2_eq & y2_greater)) { let bounce = true; do ball.leftBounce(); }
        if ((x1_eq & y1_lesser) & (x1_eq & y2_greater)) { let bounce = true; do ball.rightBounce(); }

        // bottom left corner
        if (x2_eq & y1_eq) {
            let bounce = true;
            if (ball.getDY() > 0) { do ball.leftBounce(); }
            else { do ball.bottomBounce(); }
        }

        // bottom right corner
        if (x1_eq & y1_eq) { 
            let bounce = true;
            if (ball.getDY() > 0) { do ball.rightBounce(); } 
            else { do ball.bottomBounce(); } 
        } 

        // upper left corner
        if (x2_eq & y2_eq) { 
            let bounce = true; 
            if (ball.getDY() < 0) { do ball.leftBounce(); }
            else { do ball.topBounce(); }
        }
        // upper right corner
        if (x1_eq & y2_eq) { 
            let bounce = true;
            if (ball.getDY() < 0) { do ball.rightBounce(); }
            else { do ball.topBounce(); } 
        }
        
        return bounce;
    }


    // PURPOSE: checks every brick in lob for possible break
    // CHANGES: ball movement direction, lob, memory
    method void checkBricks() {

        var int i;
        var int n;
        var Brick brick;

        let n = 0;
        let i = NUMBER_OF_BRICKS;

        while (n < i) {

            let brick = lob[n];

            if ( ~(brick = null) ) {
                if (isBrickBounce(brick)) {
                    do brick.erase();
                    do brick.dispose();
                    let lob[n] = null;
                }
            }

            let n = n + 1;
        }

        return;
    }


    // PURPOSE: runs brick breaker game
    method void run() {
        
        var char key;
        var bool started;
        var bool exit;

        let started = false;
        let exit = false;

        // TODO: NOTIFY PLAYER TO PRESS LEFT OF RIGHT ARROW

        // let player decide initial ball movement direction
        while (~started) {
            let key = Keyboard.keyPressed();
            if (key = 130) { let started = true; do ball.topBounce(); do ball.leftBounce(); }   // left arrow
            if (key = 132) { let started = true; do ball.topBounce(); do ball.rightBounce(); }  // right arrow
        }

        // main game loop
        while (~exit) {

            let key = Keyboard.keyPressed();

            do checkBorders();

            do checkPlatform();

            do checkBricks();
            
            do Sys.wait(20);
            
            do ball.move();

            if (key = 81)   { let exit = true; }                       // q
            if (key = 130)  { do platform.moveLeft(LEFT_BORDER); }     // left arrow
            if (key = 132)  { do platform.moveRight(RIGHT_BORDER); }   // right arrow

        }

        return;
    }


    function void draw0(int location) {
        var int memAddress;
        let memAddress = 16384+location;
        do Memory.poke(memAddress+0, 4080);
        do Memory.poke(memAddress+32, 8184);
        do Memory.poke(memAddress+64, 14364);
        do Memory.poke(memAddress+96, 12300);
        do Memory.poke(memAddress+128, 15372);
        do Memory.poke(memAddress+160, 15372);
        do Memory.poke(memAddress+192, 13068);
        do Memory.poke(memAddress+224, 13068);
        do Memory.poke(memAddress+256, 12492);
        do Memory.poke(memAddress+288, 12492);
        do Memory.poke(memAddress+320, 12348);
        do Memory.poke(memAddress+352, 12348);
        do Memory.poke(memAddress+384, 12300);
        do Memory.poke(memAddress+416, 14364);
        do Memory.poke(memAddress+448, 8184);
        do Memory.poke(memAddress+480, 4080);
        return;
    }

    function void draw1(int location) {
        var int memAddress;
        let memAddress = 16384+location;
        do Memory.poke(memAddress+0, 384);
        do Memory.poke(memAddress+32, 448);
        do Memory.poke(memAddress+64, 480);
        do Memory.poke(memAddress+96, 496);
        do Memory.poke(memAddress+128, 384);
        do Memory.poke(memAddress+160, 384);
        do Memory.poke(memAddress+192, 384);
        do Memory.poke(memAddress+224, 384);
        do Memory.poke(memAddress+256, 384);
        do Memory.poke(memAddress+288, 384);
        do Memory.poke(memAddress+320, 384);
        do Memory.poke(memAddress+352, 384);
        do Memory.poke(memAddress+384, 384);
        do Memory.poke(memAddress+416, 384);
        do Memory.poke(memAddress+448, 4080);
        do Memory.poke(memAddress+480, 4080);
        return;
    }

    function void draw2(int location) {
        var int memAddress;
        let memAddress = 16384+location;
        do Memory.poke(memAddress+0, 4080);
        do Memory.poke(memAddress+32, 8184);
        do Memory.poke(memAddress+64, 14364);
        do Memory.poke(memAddress+96, 12300);
        do Memory.poke(memAddress+128, 12288);
        do Memory.poke(memAddress+160, 12288);
        do Memory.poke(memAddress+192, 6144);
        do Memory.poke(memAddress+224, 8176);
        do Memory.poke(memAddress+256, 2040);
        do Memory.poke(memAddress+288, 28);
        do Memory.poke(memAddress+320, 12);
        do Memory.poke(memAddress+352, 12);
        do Memory.poke(memAddress+384, 12);
        do Memory.poke(memAddress+416, 12);
        do Memory.poke(memAddress+448, 16380);
        do Memory.poke(memAddress+480, 16380);
        return;
    }

    function void draw3(int location) {
        var int memAddress;
        let memAddress = 16384+location;
        do Memory.poke(memAddress+0, 4080);
        do Memory.poke(memAddress+32, 8184);
        do Memory.poke(memAddress+64, 14364);
        do Memory.poke(memAddress+96, 12300);
        do Memory.poke(memAddress+128, 12288);
        do Memory.poke(memAddress+160, 12288);
        do Memory.poke(memAddress+192, 6144);
        do Memory.poke(memAddress+224, 8064);
        do Memory.poke(memAddress+256, 8064);
        do Memory.poke(memAddress+288, 14336);
        do Memory.poke(memAddress+320, 12288);
        do Memory.poke(memAddress+352, 12288);
        do Memory.poke(memAddress+384, 12300);
        do Memory.poke(memAddress+416, 14364);
        do Memory.poke(memAddress+448, 8184);
        do Memory.poke(memAddress+480, 4080);
        return;
    }

    function void draw4(int location) {
        var int memAddress;
        let memAddress = 16384+location;
        do Memory.poke(memAddress+0, 3072);
        do Memory.poke(memAddress+32, 3584);
        do Memory.poke(memAddress+64, 3840);
        do Memory.poke(memAddress+96, 3968);
        do Memory.poke(memAddress+128, 3520);
        do Memory.poke(memAddress+160, 3296);
        do Memory.poke(memAddress+192, 3184);
        do Memory.poke(memAddress+224, 3128);
        do Memory.poke(memAddress+256, 3100);
        do Memory.poke(memAddress+288, 16380);
        do Memory.poke(memAddress+320, 16376);
        do Memory.poke(memAddress+352, 3072);
        do Memory.poke(memAddress+384, 3072);
        do Memory.poke(memAddress+416, 3072);
        do Memory.poke(memAddress+448, 3072);
        do Memory.poke(memAddress+480, 3072);
        return;
    }

    function void draw5(int location) {
        var int memAddress;
        let memAddress = 16384+location;
        do Memory.poke(memAddress+0, 16380);
        do Memory.poke(memAddress+32, 16380);
        do Memory.poke(memAddress+64, 12);
        do Memory.poke(memAddress+96, 12);
        do Memory.poke(memAddress+128, 12);
        do Memory.poke(memAddress+160, 4092);
        do Memory.poke(memAddress+192, 8188);
        do Memory.poke(memAddress+224, 14336);
        do Memory.poke(memAddress+256, 12288);
        do Memory.poke(memAddress+288, 12288);
        do Memory.poke(memAddress+320, 12288);
        do Memory.poke(memAddress+352, 12288);
        do Memory.poke(memAddress+384, 12300);
        do Memory.poke(memAddress+416, 14364);
        do Memory.poke(memAddress+448, 8184);
        do Memory.poke(memAddress+480, 4080);
        return;
    }

    function void draw6(int location) {
        var int memAddress;
        let memAddress = 16384+location;
        do Memory.poke(memAddress+0, 4080);
        do Memory.poke(memAddress+32, 8184);
        do Memory.poke(memAddress+64, 14364);
        do Memory.poke(memAddress+96, 12300);
        do Memory.poke(memAddress+128, 12);
        do Memory.poke(memAddress+160, 12);
        do Memory.poke(memAddress+192, 12);
        do Memory.poke(memAddress+224, 4092);
        do Memory.poke(memAddress+256, 8188);
        do Memory.poke(memAddress+288, 14348);
        do Memory.poke(memAddress+320, 12300);
        do Memory.poke(memAddress+352, 12300);
        do Memory.poke(memAddress+384, 12300);
        do Memory.poke(memAddress+416, 14364);
        do Memory.poke(memAddress+448, 8184);
        do Memory.poke(memAddress+480, 4080);
        return;
    }

    function void draw7(int location) {
        var int memAddress;
        let memAddress = 16384+location;
        do Memory.poke(memAddress+0, 16380);
        do Memory.poke(memAddress+32, 16380);
        do Memory.poke(memAddress+64, 12288);
        do Memory.poke(memAddress+96, 14336);
        do Memory.poke(memAddress+128, 7168);
        do Memory.poke(memAddress+160, 3584);
        do Memory.poke(memAddress+192, 1792);
        do Memory.poke(memAddress+224, 896);
        do Memory.poke(memAddress+256, 448);
        do Memory.poke(memAddress+288, 192);
        do Memory.poke(memAddress+320, 192);
        do Memory.poke(memAddress+352, 192);
        do Memory.poke(memAddress+384, 192);
        do Memory.poke(memAddress+416, 192);
        do Memory.poke(memAddress+448, 192);
        do Memory.poke(memAddress+480, 192);
        return;
    }

    function void draw8(int location) {
        var int memAddress;
        let memAddress = 16384+location;
        do Memory.poke(memAddress+0, 4080);
        do Memory.poke(memAddress+32, 8184);
        do Memory.poke(memAddress+64, 14364);
        do Memory.poke(memAddress+96, 12300);
        do Memory.poke(memAddress+128, 12300);
        do Memory.poke(memAddress+160, 12300);
        do Memory.poke(memAddress+192, 6168);
        do Memory.poke(memAddress+224, 8184);
        do Memory.poke(memAddress+256, 8184);
        do Memory.poke(memAddress+288, 14364);
        do Memory.poke(memAddress+320, 12300);
        do Memory.poke(memAddress+352, 12300);
        do Memory.poke(memAddress+384, 12300);
        do Memory.poke(memAddress+416, 14364);
        do Memory.poke(memAddress+448, 8184);
        do Memory.poke(memAddress+480, 4080);
        return;
    }

    function void draw9(int location) {
        var int memAddress;
        let memAddress = 16384+location;
        do Memory.poke(memAddress+0, 4080);
        do Memory.poke(memAddress+32, 8184);
        do Memory.poke(memAddress+64, 14364);
        do Memory.poke(memAddress+96, 12300);
        do Memory.poke(memAddress+128, 12300);
        do Memory.poke(memAddress+160, 12300);
        do Memory.poke(memAddress+192, 12316);
        do Memory.poke(memAddress+224, 16376);
        do Memory.poke(memAddress+256, 16368);
        do Memory.poke(memAddress+288, 12288);
        do Memory.poke(memAddress+320, 12288);
        do Memory.poke(memAddress+352, 12288);
        do Memory.poke(memAddress+384, 12300);
        do Memory.poke(memAddress+416, 14364);
        do Memory.poke(memAddress+448, 8184);
        do Memory.poke(memAddress+480, 4080);
        return;
    }

    function void drawS(int location) {
        var int memAddress;
        let memAddress = 16384+location;
        do Memory.poke(memAddress+0, 4080);
        do Memory.poke(memAddress+32, 8184);
        do Memory.poke(memAddress+64, 14364);
        do Memory.poke(memAddress+96, 12300);
        do Memory.poke(memAddress+128, 12);
        do Memory.poke(memAddress+160, 12);
        do Memory.poke(memAddress+192, 28);
        do Memory.poke(memAddress+224, 4088);
        do Memory.poke(memAddress+256, 8176);
        do Memory.poke(memAddress+288, 14336);
        do Memory.poke(memAddress+320, 12288);
        do Memory.poke(memAddress+352, 12288);
        do Memory.poke(memAddress+384, 12300);
        do Memory.poke(memAddress+416, 14364);
        do Memory.poke(memAddress+448, 8184);
        do Memory.poke(memAddress+480, 4080);
        return;
    }

    function void drawC(int location) {
        var int memAddress;
        let memAddress = 16384+location;
        do Memory.poke(memAddress+0, 4080);
        do Memory.poke(memAddress+32, 8184);
        do Memory.poke(memAddress+64, 14364);
        do Memory.poke(memAddress+96, 12300);
        do Memory.poke(memAddress+128, 12);
        do Memory.poke(memAddress+160, 12);
        do Memory.poke(memAddress+192, 12);
        do Memory.poke(memAddress+224, 12);
        do Memory.poke(memAddress+256, 12);
        do Memory.poke(memAddress+288, 12);
        do Memory.poke(memAddress+320, 12);
        do Memory.poke(memAddress+352, 12);
        do Memory.poke(memAddress+384, 12300);
        do Memory.poke(memAddress+416, 14364);
        do Memory.poke(memAddress+448, 8184);
        do Memory.poke(memAddress+480, 4080);
        return;
    }

    function void drawO(int location) {
        var int memAddress;
        let memAddress = 16384+location;
        do Memory.poke(memAddress+0, 4080);
        do Memory.poke(memAddress+32, 8184);
        do Memory.poke(memAddress+64, 14364);
        do Memory.poke(memAddress+96, 12300);
        do Memory.poke(memAddress+128, 12300);
        do Memory.poke(memAddress+160, 12300);
        do Memory.poke(memAddress+192, 12300);
        do Memory.poke(memAddress+224, 12300);
        do Memory.poke(memAddress+256, 12300);
        do Memory.poke(memAddress+288, 12300);
        do Memory.poke(memAddress+320, 12300);
        do Memory.poke(memAddress+352, 12300);
        do Memory.poke(memAddress+384, 12300);
        do Memory.poke(memAddress+416, 14364);
        do Memory.poke(memAddress+448, 8184);
        do Memory.poke(memAddress+480, 4080);
        return;
    }

    function void drawR(int location) {
        var int memAddress;
        let memAddress = 16384+location;
        do Memory.poke(memAddress+0, 4092);
        do Memory.poke(memAddress+32, 8188);
        do Memory.poke(memAddress+64, 14348);
        do Memory.poke(memAddress+96, 12300);
        do Memory.poke(memAddress+128, 12300);
        do Memory.poke(memAddress+160, 14348);
        do Memory.poke(memAddress+192, 8188);
        do Memory.poke(memAddress+224, 4092);
        do Memory.poke(memAddress+256, 236);
        do Memory.poke(memAddress+288, 460);
        do Memory.poke(memAddress+320, 908);
        do Memory.poke(memAddress+352, 1804);
        do Memory.poke(memAddress+384, 3596);
        do Memory.poke(memAddress+416, 7180);
        do Memory.poke(memAddress+448, 14348);
        do Memory.poke(memAddress+480, 12300);
        return;
    }

    function void drawE(int location) {
        var int memAddress;
        let memAddress = 16384+location;
        do Memory.poke(memAddress+0, 16380);
        do Memory.poke(memAddress+32, 16380);
        do Memory.poke(memAddress+64, 12);
        do Memory.poke(memAddress+96, 12);
        do Memory.poke(memAddress+128, 12);
        do Memory.poke(memAddress+160, 12);
        do Memory.poke(memAddress+192, 12);
        do Memory.poke(memAddress+224, 4092);
        do Memory.poke(memAddress+256, 4092);
        do Memory.poke(memAddress+288, 12);
        do Memory.poke(memAddress+320, 12);
        do Memory.poke(memAddress+352, 12);
        do Memory.poke(memAddress+384, 12);
        do Memory.poke(memAddress+416, 12);
        do Memory.poke(memAddress+448, 16380);
        do Memory.poke(memAddress+480, 16380);
        return;
    }

    function void drawColon(int location) {
        var int memAddress;
        let memAddress = 16384+location;
        do Memory.poke(memAddress+0, 0);
        do Memory.poke(memAddress+32, 0);
        do Memory.poke(memAddress+64, 0);
        do Memory.poke(memAddress+96, 384);
        do Memory.poke(memAddress+128, 384);
        do Memory.poke(memAddress+160, 0);
        do Memory.poke(memAddress+192, 0);
        do Memory.poke(memAddress+224, 0);
        do Memory.poke(memAddress+256, 0);
        do Memory.poke(memAddress+288, 0);
        do Memory.poke(memAddress+320, 0);
        do Memory.poke(memAddress+352, 384);
        do Memory.poke(memAddress+384, 384);
        do Memory.poke(memAddress+416, 0);
        do Memory.poke(memAddress+448, 0);
        do Memory.poke(memAddress+480, 0);
        return;
    }

    function void drawL(int location) {
        var int memAddress;
        let memAddress = 16384+location;
        do Memory.poke(memAddress+0, 12);
        do Memory.poke(memAddress+32, 12);
        do Memory.poke(memAddress+64, 12);
        do Memory.poke(memAddress+96, 12);
        do Memory.poke(memAddress+128, 12);
        do Memory.poke(memAddress+160, 12);
        do Memory.poke(memAddress+192, 12);
        do Memory.poke(memAddress+224, 12);
        do Memory.poke(memAddress+256, 12);
        do Memory.poke(memAddress+288, 12);
        do Memory.poke(memAddress+320, 12);
        do Memory.poke(memAddress+352, 12);
        do Memory.poke(memAddress+384, 12);
        do Memory.poke(memAddress+416, 12);
        do Memory.poke(memAddress+448, 16380);
        do Memory.poke(memAddress+480, 16380);
        return;
    }

    function void drawI(int location) {
        var int memAddress;
        let memAddress = 16384+location;
        do Memory.poke(memAddress+0, 4080);
        do Memory.poke(memAddress+32, 4080);
        do Memory.poke(memAddress+64, 384);
        do Memory.poke(memAddress+96, 384);
        do Memory.poke(memAddress+128, 384);
        do Memory.poke(memAddress+160, 384);
        do Memory.poke(memAddress+192, 384);
        do Memory.poke(memAddress+224, 384);
        do Memory.poke(memAddress+256, 384);
        do Memory.poke(memAddress+288, 384);
        do Memory.poke(memAddress+320, 384);
        do Memory.poke(memAddress+352, 384);
        do Memory.poke(memAddress+384, 384);
        do Memory.poke(memAddress+416, 384);
        do Memory.poke(memAddress+448, 4080);
        do Memory.poke(memAddress+480, 4080);
        return;
    }

    function void drawF(int location) {
        var int memAddress;
        let memAddress = 16384+location;
        do Memory.poke(memAddress+0, 16380);
        do Memory.poke(memAddress+32, 16380);
        do Memory.poke(memAddress+64, 12);
        do Memory.poke(memAddress+96, 12);
        do Memory.poke(memAddress+128, 12);
        do Memory.poke(memAddress+160, 12);
        do Memory.poke(memAddress+192, 12);
        do Memory.poke(memAddress+224, 2044);
        do Memory.poke(memAddress+256, 2044);
        do Memory.poke(memAddress+288, 12);
        do Memory.poke(memAddress+320, 12);
        do Memory.poke(memAddress+352, 12);
        do Memory.poke(memAddress+384, 12);
        do Memory.poke(memAddress+416, 12);
        do Memory.poke(memAddress+448, 12);
        do Memory.poke(memAddress+480, 12);
        return;
    }

    function void drawSkull(int location) {
        var int memAddress;
        let memAddress = 16384+location;
        do Memory.poke(memAddress+0, 2032);
        do Memory.poke(memAddress+32, 4088);
        do Memory.poke(memAddress+64, 8188);
        do Memory.poke(memAddress+96, 8188);
        do Memory.poke(memAddress+128, 7644);
        do Memory.poke(memAddress+160, 6284);
        do Memory.poke(memAddress+192, 6604);
        do Memory.poke(memAddress+224, 3960);
        do Memory.poke(memAddress+256, 9186);
        do Memory.poke(memAddress+288, 25251);
        do Memory.poke(memAddress+320, 4100);
        do Memory.poke(memAddress+352, 1360);
        do Memory.poke(memAddress+384, 2032);
        do Memory.poke(memAddress+416, 5092);
        do Memory.poke(memAddress+448, 24579);
        do Memory.poke(memAddress+480, 8194);
        return;
    }

    function void drawV(int location) {
        var int memAddress;
        let memAddress = 16384+location;
        do Memory.poke(memAddress+0, 12300);
        do Memory.poke(memAddress+32, 12300);
        do Memory.poke(memAddress+64, 12300);
        do Memory.poke(memAddress+96, 12300);
        do Memory.poke(memAddress+128, 12300);
        do Memory.poke(memAddress+160, 12300);
        do Memory.poke(memAddress+192, 12300);
        do Memory.poke(memAddress+224, 12300);
        do Memory.poke(memAddress+256, 12300);
        do Memory.poke(memAddress+288, 12300);
        do Memory.poke(memAddress+320, 14364);
        do Memory.poke(memAddress+352, 7224);
        do Memory.poke(memAddress+384, 3696);
        do Memory.poke(memAddress+416, 2016);
        do Memory.poke(memAddress+448, 960);
        do Memory.poke(memAddress+480, 384);
        return;
    }

    function void drawLeftArrow(int location) {
        var int memAddress;
        let memAddress = 16384+location;
        do Memory.poke(memAddress+0, 0);
        do Memory.poke(memAddress+32, 0);
        do Memory.poke(memAddress+64, 3584);
        do Memory.poke(memAddress+96, 1920);
        do Memory.poke(memAddress+128, 992);
        do Memory.poke(memAddress+160, 504);
        do Memory.poke(memAddress+192, 254);
        do Memory.poke(memAddress+224, -1);
        do Memory.poke(memAddress+256, -1);
        do Memory.poke(memAddress+288, 254);
        do Memory.poke(memAddress+320, 504);
        do Memory.poke(memAddress+352, 992);
        do Memory.poke(memAddress+384, 1920);
        do Memory.poke(memAddress+416, 3584);
        do Memory.poke(memAddress+448, 0);
        do Memory.poke(memAddress+480, 0);
        return;
    }

    function void drawRightArrow(int location) {
        var int memAddress;
        let memAddress = 16384+location;
        do Memory.poke(memAddress+0, 0);
        do Memory.poke(memAddress+32, 0);
        do Memory.poke(memAddress+64, 112);
        do Memory.poke(memAddress+96, 480);
        do Memory.poke(memAddress+128, 1984);
        do Memory.poke(memAddress+160, 8064);
        do Memory.poke(memAddress+192, 32512);
        do Memory.poke(memAddress+224, -1);
        do Memory.poke(memAddress+256, -1);
        do Memory.poke(memAddress+288, 32512);
        do Memory.poke(memAddress+320, 8064);
        do Memory.poke(memAddress+352, 1984);
        do Memory.poke(memAddress+384, 480);
        do Memory.poke(memAddress+416, 112);
        do Memory.poke(memAddress+448, 0);
        do Memory.poke(memAddress+480, 0);
        return;
    }

    function void drawP(int location) {
        var int memAddress;
        let memAddress = 16384+location;
        do Memory.poke(memAddress+0, 4092);
        do Memory.poke(memAddress+32, 8188);
        do Memory.poke(memAddress+64, 14348);
        do Memory.poke(memAddress+96, 12300);
        do Memory.poke(memAddress+128, 12300);
        do Memory.poke(memAddress+160, 12300);
        do Memory.poke(memAddress+192, 14348);
        do Memory.poke(memAddress+224, 8188);
        do Memory.poke(memAddress+256, 4092);
        do Memory.poke(memAddress+288, 12);
        do Memory.poke(memAddress+320, 12);
        do Memory.poke(memAddress+352, 12);
        do Memory.poke(memAddress+384, 12);
        do Memory.poke(memAddress+416, 12);
        do Memory.poke(memAddress+448, 12);
        do Memory.poke(memAddress+480, 12);
        return;
    }

    function void drawCrown(int location) {
        var int memAddress;
        let memAddress = 16384+location;
        do Memory.poke(memAddress+0, 128);
        do Memory.poke(memAddress+32, 16513);
        do Memory.poke(memAddress+64, 25027);
        do Memory.poke(memAddress+96, 29127);
        do Memory.poke(memAddress+128, 31727);
        do Memory.poke(memAddress+160, 31727);
        do Memory.poke(memAddress+192, 32767);
        do Memory.poke(memAddress+224, 32767);
        do Memory.poke(memAddress+256, 32767);
        do Memory.poke(memAddress+288, 32767);
        do Memory.poke(memAddress+320, 0);
        do Memory.poke(memAddress+352, 32767);
        do Memory.poke(memAddress+384, 32767);
        do Memory.poke(memAddress+416, 0);
        do Memory.poke(memAddress+448, 32767);
        do Memory.poke(memAddress+480, 32767);
        return;
    }

} // class