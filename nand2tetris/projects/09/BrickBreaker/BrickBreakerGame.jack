

/*
* All you have to do in this game is to break all the bricks on the screen.
* Press left or right arrow to move platform around.
* Press q to leave the game.
* If the ball touches the bottom border, you lose one life.
* Try to not lose any lifes, while playing this game, but also, don't forget, you have 3 of them to spend!
* Pretty simple game, isn't it? Just be patient :)
*/

// PURPOSE: represents a brick breaker game
class BrickBreakerGame {


    // IDEA: decrease score with each life loss
    // BIG IDIA: implement restart button if possible
    // BIG IDIA: implement pause if possible
    // BIG IDIA: if platform moves to the side when a ball touches it, then change 
    //           direction of the ball accordingly in direction of movement of the platform


    // objects of the game
    field Platform platform;
    field Ball ball;
    // list of bricks
    field array lob;
    // game stats
    field int game_speed;
    field int score;
    field int lifes;
    field bool exit;
    field bool pause;
    field bool confirmed;
    field bool switch;

    // constants
    static int LEFT_BORDER, RIGHT_BORDER, TOP_BORDER, BOTTOM_BORDER;
    static int NUMBER_OF_BRICKS;
    static int GAME_OVER_TEXT_POSITION;
    static int INTRO_TEXT_POSITION, SCORE_TEXT_POSITION, LIFES_TEXT_POSITION;
    static int BALL_X_POSITION, BALL_Y_POSITION;
    static int PLATFORM_X_POSITION, PLATFORM_Y_POSITION;


    // PURPOSE: constructs a new Brick Breaker game
    constructor BrickBreakerGame new() {
        do init();

        do drawBorders();

        // create and initialize objects of the game
        let lob = Array.new(NUMBER_OF_BRICKS);
        do createBricks();
        let ball = Ball.new(BALL_X_POSITION, BALL_Y_POSITION);
        let platform = Platform.new(PLATFORM_X_POSITION, PLATFORM_Y_POSITION);

        let score = 0;
        let lifes = 3;

        do drawScore(SCORE_TEXT_POSITION, score);
        do drawLifes(LIFES_TEXT_POSITION, lifes);

        return this;
    }


    // PURPOSE: initizlizes game constants
    // CHANGES: constants
    method void init() {

        let game_speed = 5;
        
        let LEFT_BORDER = 49;
        let RIGHT_BORDER = 461;
        
        let TOP_BORDER = 49;
        let BOTTOM_BORDER = 200;

        let NUMBER_OF_BRICKS = 40; // TOTAL NUMBER OF BRICKS
        let BALL_X_POSITION = 249 + 15;                 // center of the platform
        let BALL_Y_POSITION = BOTTOM_BORDER - 15;       // sits on the platform
        let PLATFORM_X_POSITION = 250;                  // center of the screen
        let PLATFORM_Y_POSITION = BOTTOM_BORDER - 10;   // sits on the border

        let GAME_OVER_TEXT_POSITION = 4014;
        let INTRO_TEXT_POSITION = 4010;
        let SCORE_TEXT_POSITION = 7171;
        let LIFES_TEXT_POSITION = 7189;
        
        return;
    }


    // PURPOSE: frees memory from a game
    // CHANGES: memory
    method void dispose() {

        do platform.dispose();
        do ball.dispose();

        do disposeBricks();
        do Memory.deAlloc(lob);

        do Memory.deAlloc(this);

        return;
    }


    // PURPOSE: creates bricks to break
    // CHANGES: lob
    method void createBricks() {

        var int i;
        var int n;
        var int x;
        var int y;
        var int shift;

        let i = 0;
        let n = NUMBER_OF_BRICKS;
        let x = LEFT_BORDER + 8;
        let y = TOP_BORDER + 10;
        // distance between bricks by x1 coordinate
        let shift = 20;

        while (i < n) {
            // NOTE: hardcoded value of brick - X size
            // next row of bricks
            if (x > (RIGHT_BORDER - 15)) { let x = LEFT_BORDER + 8; let y = y + 15; }

            let lob[i] = Brick.new(x, y);
            let x = x + shift;
            let i = i + 1; 
        }

        return;
    }


    // PURPOSE: disposes bricks inside list of bricks
    // CHANGES: memory
    method void disposeBricks() {

        var int n;
        var int i;
        var Brick brick;

        let n = 0;
        let i = NUMBER_OF_BRICKS;

        while (n < i) {
            let brick = lob[n];
            if (~(brick = null)) { do brick.dispose(); }
            let n = n + 1;
        }

        return;
    }


    // PURPOSE: draws borders of playgraound area on the screen
    // CHANGES: screen
    // NOTE: does repeat computations, but only once

    // NOTE: INCREASED PERFORMANCE WITH MEMORY PEEK POKE
    //    var int memAddress;
    //    var int n;
    //    var int i;
    //    
    //    let memAddress = 16384+512;
    //    let n = 1;
    //    let i = 31;
    //    
    //    while (n < i) {
    //        do Memory.poke(memAddress+n, -1);
    //        let n = n + 1;
    //    }

    method void drawBorders() {

        do Screen.setColor(true);
        do Screen.drawLine(LEFT_BORDER-1, TOP_BORDER-1, RIGHT_BORDER+1, TOP_BORDER-1);          // top border
        do Screen.drawLine(RIGHT_BORDER+1, TOP_BORDER-1, RIGHT_BORDER+1, BOTTOM_BORDER+1);      // right border
        do Screen.drawLine(LEFT_BORDER-1, TOP_BORDER-1, LEFT_BORDER-1, BOTTOM_BORDER+1);        // left border
        do Screen.drawLine(LEFT_BORDER-1, BOTTOM_BORDER+1, RIGHT_BORDER+1, BOTTOM_BORDER+1);    // bottom border
        
        return;
    }


    // PURPOSE: erases requested amount of sprites at specified location
    // CHANGES: screen
    method void eraseSprite(int location, int length) {
        
        var int i;
        var int n;

        let n = location;

        while (i < length) {
            do Bitmaps.erase(n);
            let i = i + 1;
            let n = n + 1;
        }

        return;
    }
    

    // PURPOSE: draws instruciton to start the game on the screen
    // CHANGES: screen
    method void drawIntroText(int location) {
        do Bitmaps.drawP(location);
        do Bitmaps.drawR(location + 1);
        do Bitmaps.drawE(location + 2);
        do Bitmaps.drawS(location + 3);
        do Bitmaps.drawS(location + 4);
        // blank
        do Bitmaps.drawLeftArrow(location + 6);
        // blank
        do Bitmaps.drawO(location + 8);
        do Bitmaps.drawR(location + 9);
        // blank
        do Bitmaps.drawRightArrow(location + 11);
        return;
    }


    // PURPOSE: parses passed number and draws it on specified position of the screen
    // CHANGES: screen
    // NOTE: number must be is range 0 - 99;
    method void drawNumber(int location, int number) {

        if (number > 9) {
            do drawNumber(location, number / 10); // draw left digit
            let number = number - (10 * (number / 10)); // draw right digit
            let location = location + 1; // move cursor
        }

        if (number = 0) { do Bitmaps.draw0(location); }
        if (number = 1) { do Bitmaps.draw1(location); }
        if (number = 2) { do Bitmaps.draw2(location); }
        if (number = 3) { do Bitmaps.draw3(location); }
        if (number = 4) { do Bitmaps.draw4(location); }
        if (number = 5) { do Bitmaps.draw5(location); }
        if (number = 6) { do Bitmaps.draw6(location); }
        if (number = 7) { do Bitmaps.draw7(location); }
        if (number = 8) { do Bitmaps.draw8(location); }
        if (number = 9) { do Bitmaps.draw9(location); }
        return;
    }


    // PURPOSE: draws current score of the player on the screen
    // CHANGES: screen
    method void drawScore(int location, int amount) {
        do Bitmaps.drawS(location);
        do Bitmaps.drawC(location + 1);
        do Bitmaps.drawO(location + 2);
        do Bitmaps.drawR(location + 3);
        do Bitmaps.drawE(location + 4);
        
        do Bitmaps.drawColon(location + 5);

        do drawNumber(location + 6, amount);

        return;
    }


    // PURPOSE: draws current amount of lifes on the screen
    // CHANGES: screen
    method void drawLifes(int location, int amount) {
        do Bitmaps.drawL(location + 1);
        do Bitmaps.drawI(location + 2);
        do Bitmaps.drawF(location + 3);
        do Bitmaps.drawE(location + 4);
        do Bitmaps.drawS(location + 5);
        do Bitmaps.drawColon(location + 6);
        
        do drawNumber(location + 7, amount);
        return;
    }

    
    // PURPOSE: draws OVER text at specified location on the screen
    // CHANGES: screen
    method void drawOverText(int location) {
        do Bitmaps.drawO(location);
        do Bitmaps.drawV(location + 1);
        // blank
        do Bitmaps.drawE(location + 3);
        do Bitmaps.drawR(location + 4);
        return;
    }


    // PURPOSE: draws text for a winner on the screen
    // CHANGES: screen
    method void drawWinText(int location) {
        do drawOverText(location);
        do Bitmaps.drawCrown(location + 2);
        return;
    }


    // PURPOSE: draws text for a loser on the screen
    // CHANGES: screen
    method void drawLoseText(int location) {
        do drawOverText(location);
        do Bitmaps.drawSkull(location + 2);
        return;
    }


    // PURPOSE: draws text for each life loss event
    // CHANGES: screen
    method void drawLifeLossText(int location) {
        do Bitmaps.drawP(location);
        do Bitmaps.drawR(location + 1);
        do Bitmaps.drawE(location + 2);
        do Bitmaps.drawS(location + 3);
        do Bitmaps.drawS(location + 4);
        // blank
        do Bitmaps.drawS(location + 6);
        do Bitmaps.drawP(location + 7);
        do Bitmaps.drawA(location + 8);
        do Bitmaps.drawC(location + 9);
        do Bitmaps.drawE(location + 10);
        return;
    }


    // PURPOSE: changes score on the game screen
    // CHANGES: switch, game_speed, pause, exit, score, screen
    method void increaseScore() {
        let score = score + 1; // increase score
        do drawScore(SCORE_TEXT_POSITION, score); // display change on the screen
        if (score = NUMBER_OF_BRICKS) { do drawWinText(GAME_OVER_TEXT_POSITION); let exit = true; let pause = true; } // game over
        if (switch) { let game_speed = game_speed + 1; let switch = false; }
        else { let switch = true; }
        return;
    }

    
    // PURPOSE: changes available lifes
    // CHANGES: cpmforirmed, pause, exit, lifes, screen
    method void decreaseLifes() {
        let lifes = lifes - 1; // decrease lifes
        do drawLifes(LIFES_TEXT_POSITION, lifes); // display change on the screen
        if (lifes = 0) { do drawLoseText(GAME_OVER_TEXT_POSITION); let exit = true; } // game over 
        let confirmed = false; let pause = true; // pause after each life loss
        return;
    }


    // PURPOSE: checks possible bounce between border lines and the ball
    // CHANGES: ball movement direction
    method void checkBorders() {
        if ( ball.getX1() = LEFT_BORDER )   { do ball.rightBounce(); }
        if ( ball.getX2() = RIGHT_BORDER )  { do ball.leftBounce(); }

        if ( ball.getY1() = TOP_BORDER )    { do ball.bottomBounce(); }
        if ( ball.getY2() = BOTTOM_BORDER ) { do ball.topBounce(); do decreaseLifes(); }
        return;
    }


    // PURPOSE: checks possible bounce between the platform and the ball
    // CHANGES: ball movement direction
    method void checkPlatform() {

        var bool x_eq;
        var bool y_eq;

        let x_eq = (ball.getX1() = platform.getX2()) | (ball.getX2() = platform.getX1());
        let y_eq = ball.getY2() = (platform.getY1() - 1);

        if (((x_eq | (ball.getX2() > platform.getX1())) & y_eq) &
            ((x_eq | (ball.getX1() < platform.getX2())) & y_eq))
            { do ball.topBounce(); }
            
        return;
    }


    // PURPOSE: checks possible bounce between a brick and the ball
    // RETURNS: bool
    // CHANGES: ball movement direction
    method bool isBrickBounce(Brick brick) {

        var bool bounce;

        var bool x1_eq;
        var bool x2_eq;
        var bool y1_eq;
        var bool y2_eq;

        var bool x1_lesser;
        var bool y1_lesser;
        var bool x2_greater;
        var bool y2_greater;

        let bounce = false;
        
        let x1_eq = ball.getX1() = brick.getX2(); // left
        let x2_eq = ball.getX2() = brick.getX1(); // right
        let y1_eq = ball.getY1() = brick.getY2(); // bottom
        let y2_eq = ball.getY2() = brick.getY1(); // top

        let x1_lesser  = ball.getX1() < brick.getX2();
        let y1_lesser  = ball.getY1() < brick.getY2();
        let x2_greater = ball.getX2() > brick.getX1();
        let y2_greater = ball.getY2() > brick.getY1();

        if ((x1_lesser & y1_eq) & (x2_greater & y1_eq)) { let bounce = true; do ball.bottomBounce(); } // bottom side
        if ((x1_lesser & y2_eq) & (x2_greater & y2_eq)) { let bounce = true; do ball.topBounce(); }
        if ((x2_eq & y1_lesser) & (x2_eq & y2_greater)) { let bounce = true; do ball.leftBounce(); }
        if ((x1_eq & y1_lesser) & (x1_eq & y2_greater)) { let bounce = true; do ball.rightBounce(); }

        // bottom left corner
        if (x2_eq & y1_eq) {
            let bounce = true;
            if (ball.getDY() > 0) { do ball.leftBounce(); }
            else { do ball.bottomBounce(); }
        }

        // bottom right corner
        if (x1_eq & y1_eq) { 
            let bounce = true;
            if (ball.getDY() > 0) { do ball.rightBounce(); } 
            else { do ball.bottomBounce(); } 
        } 

        // upper left corner
        if (x2_eq & y2_eq) { 
            let bounce = true; 
            if (ball.getDY() < 0) { do ball.leftBounce(); }
            else { do ball.topBounce(); }
        }
        // upper right corner
        if (x1_eq & y2_eq) { 
            let bounce = true;
            if (ball.getDY() < 0) { do ball.rightBounce(); }
            else { do ball.topBounce(); } 
        }
        
        return bounce;
    }


    // PURPOSE: checks every brick in lob for possible break
    // CHANGES: ball movement direction, lob, memory, score
    method void checkBricks() {

        var int i;
        var int n;
        var Brick brick;

        let n = 0;
        let i = NUMBER_OF_BRICKS;

        while (n < i) {

            let brick = lob[n];

            if ( ~(brick = null) ) {
                if (isBrickBounce(brick)) {
                    do increaseScore(); // NOTE: score change
                    do brick.erase();  
                    do brick.dispose();
                    let lob[n] = null;
                }
            }

            let n = n + 1;
        }

        return;
    }


    // PURPOSE: resets position of the ball and platform to its initial 
    // CHANGES: ball, platform, screen
    method void resetBallAndPlatform() {
        do ball.erase();
        do platform.erase();
        do ball.setPosition(BALL_X_POSITION, BALL_Y_POSITION);
        do platform.setPosition(PLATFORM_X_POSITION, PLATFORM_Y_POSITION);
        do ball.draw();
        do platform.draw();
        return;
    }


    // PURPOSE: runs brick breaker game
    // CHANGES: a lot of stuff
    method void run() {
        
        var char key;
        var bool started;

        let exit = false;
        let pause = false;
        let started = false;
        let confirmed = true;
        let switch = false;

        while (~exit) {

            // move ball and platform to its initial position on the screen
            do resetBallAndPlatform();

            // let player decide initial ball movement direction
            while (~started) {
                // notify player to press left or right arrow
                do drawIntroText(INTRO_TEXT_POSITION);
                
                let key = Keyboard.keyPressed();
                if (key = 81)   { let exit = true; }                                                // q
                if (key = 130)  { let started = true; do ball.topBounce(); do ball.leftBounce(); }  // left arrow
                if (key = 132)  { let started = true; do ball.topBounce(); do ball.rightBounce(); } // right arrow
            }

            // erase intro text
            do eraseSprite(INTRO_TEXT_POSITION, 12);

            // main game loop
            while (~pause) {
                // TODO: change game speed
                do Sys.wait(game_speed);

                let key = Keyboard.keyPressed();

                do checkBorders();

                do checkPlatform();

                do checkBricks();
                
                do ball.move();

                if (key = 81)   { let exit = true; }                        // q
                if (key = 130)  { do platform.moveLeft(LEFT_BORDER); }      // left arrow
                if (key = 132)  { do platform.moveRight(RIGHT_BORDER); }    // right arrow
            }

            // confirm each life loss
            while ((~confirmed) & ~(lifes = 0)) {
                // notify player to press space
                do drawLifeLossText(INTRO_TEXT_POSITION);

                let key = Keyboard.keyPressed();
                if (key = 81)   { let exit = true; }                                                // q
                if (key = 32)   { let confirmed = true; let started = false; let pause = false;}    // space
            }

            // erase life loss text at the center of the screen, but not when game is already over
            if ((~(lifes = 0)) | (~(score = NUMBER_OF_BRICKS))) {
                do eraseSprite(INTRO_TEXT_POSITION, 12);
            }

        } //exit

        return;
    }


} // class