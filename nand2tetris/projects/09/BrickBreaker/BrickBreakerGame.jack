

// PURPOSE: represents a brick breaker game
// TODO: create a better description
class BrickBreakerGame {

    // objects of the game
    field Platform platform;
    field Ball ball;


    // PURPOSE: constructs a new Brick Breaker game
    constructor BrickBreakerGame new() {

        let platform = Platform.new(256, 200);
        let ball = Ball.new(256, 128);

        return this;
    }


    // PURPOSE: frees memory from a game
    // CHANGES: memory
    method void dispose() {

        do platform.dispose();
        do ball.dispose();

        do Memory.deAlloc(this);

        return;
    }


    // PURPOSE: checks possible bounce between platform and ball
    // RETURNS: bool
    
    // TODO: add better platform collision

    method bool isBounce() {
        return (( (platform.getX() < (ball.getX() - 3 )) & ( platform.getY() < (ball.getY() + 3) )) &
                (( (ball.getX() + 3) < (platform.getX() + 30)) & ( platform.getY() < (ball.getY() + 3)  )));
    }


    // PURPOSE: runs brick breaker game
    method void run() {
        
        var char key;
        var bool exit;

        let exit = false;

        while (~exit) {


            let key = Keyboard.keyPressed();

            if (isBounce()) { do ball.bounce(); }

            do platform.draw();
            
            do ball.move();

            //do Sys.wait(5);

            if (key = 81)   { let exit = true; }           // q
            if (key = 130)  { do platform.moveLeft(); }    // left arrow
            if (key = 132)  { do platform.moveRight(); }   // right arrow


        }

        return;
    }

} // class