

// PURPOSE: represents a brick breaker game
// TODO: create a better description
class BrickBreakerGame {

    // NOTE: DO NOT FORGET ABOUT PERFORMANCE

    // TODO: add lose/win conditions
    //      TODO: add lifes
    //          TODO: change bottom border logic
    //      TODO: add score
    //          TODO: add counter
    // BIG TODO: if platform moves to the side when a ball touches it, then change 
    //           direction of the ball accordingly in direction of movement of the platform

    // objects of the game
    field Platform platform;
    field Ball ball;
    // list of bricks
    field array lob;

    // constants
    static int LEFT_BORDER, RIGHT_BORDER, TOP_BORDER, BOTTOM_BORDER;
    static int NUMBER_OF_BRICKS;


    // PURPOSE: constructs a new Brick Breaker game
    constructor BrickBreakerGame new() {

        do init();

        do drawBorders();

        let platform = Platform.new(255, BOTTOM_BORDER - 10);
        let ball = Ball.new(254 + 15, BOTTOM_BORDER - 15);
        
        let lob = Array.new(NUMBER_OF_BRICKS);
        do createBricks();

        return this;
    }


    // PURPOSE: initizlizes constants for a game
    // CHANGES: constants
    method void init() {
        
        let LEFT_BORDER = 49;
        let RIGHT_BORDER = 461;
        
        let TOP_BORDER = 49;
        let BOTTOM_BORDER = 200;

        let NUMBER_OF_BRICKS = 40; // TOTAL NUMBER OF BRICKS
        
        return;
    }


    // PURPOSE: frees memory from a game
    // CHANGES: memory
    method void dispose() {

        do platform.dispose();
        do ball.dispose();

        do disposeBricks();
        do Memory.deAlloc(lob);

        do Memory.deAlloc(this);

        return;
    }


    // PURPOSE: creates bricks to break
    // CHANGES: lob
    method void createBricks() {

        var int i;
        var int n;
        var int x;
        var int y;
        var int shift;

        let i = 0;
        let n = NUMBER_OF_BRICKS;
        let x = LEFT_BORDER + 8;
        let y = TOP_BORDER + 10;
        // distance between bricks by x1 coordinate
        let shift = 20;

        while (i < n) {
            // NOTE: hardcoded value of brick X size
            // next row of bricks
            if (x > (RIGHT_BORDER - 15)) { let x = LEFT_BORDER + 8; let y = y + 15; }

            let lob[i] = Brick.new(x, y);
            let x = x + shift;
            let i = i + 1; 
        }

        return;
    }


    // PURPOSE: disposes bricks inside list of bricks
    // CHANGES: memory
    method void disposeBricks() {

        var int n;
        var int i;
        var Brick brick;

        let n = 0;
        let i = NUMBER_OF_BRICKS;

        while (n < i) {
            let brick = lob[n];
            if (~(brick = null)) { do brick.dispose(); }
            let n = n + 1;
        }

        return;
    }


    // PURPOSE: draws borders of playgraound area on the screen
    // CHANGES: screen
    // NOTE: does repeat computations, but only once

    // NOTE: INCREASED PERFORMANCE WITH MEMORY PEEK POKE
    //    var int memAddress;
    //    var int n;
    //    var int i;
    //    
    //    let memAddress = 16384+512;
    //    let n = 1;
    //    let i = 31;
    //    
    //    while (n < i) {
    //        do Memory.poke(memAddress+n, -1);
    //        let n = n + 1;
    //    }

    method void drawBorders() {

        do Screen.setColor(true);
        do Screen.drawLine(LEFT_BORDER-1, TOP_BORDER-1, RIGHT_BORDER+1, TOP_BORDER-1);          // top border
        do Screen.drawLine(RIGHT_BORDER+1, TOP_BORDER-1, RIGHT_BORDER+1, BOTTOM_BORDER+1);      // right border
        do Screen.drawLine(LEFT_BORDER-1, TOP_BORDER-1, LEFT_BORDER-1, BOTTOM_BORDER+1);        // left border
        do Screen.drawLine(LEFT_BORDER-1, BOTTOM_BORDER+1, RIGHT_BORDER+1, BOTTOM_BORDER+1);    // bottom border
        
        return;
    }

    
    // PURPOSE: checks possible bounce between border lines and the ball
    // CHANGES: ball movement direction
    method void checkBorders() {
        
        if ( ball.getX1() = LEFT_BORDER )   { do ball.rightBounce(); } 
        if ( ball.getX2() = RIGHT_BORDER )  { do ball.leftBounce(); }  

        if ( ball.getY1() = TOP_BORDER )    { do ball.bottomBounce(); }  
        if ( ball.getY2() = BOTTOM_BORDER ) { do ball.topBounce(); } 
        
        return;
    }


    // PURPOSE: checks possible bounce between the platform and the ball
    // CHANGES: ball movement direction
    method void checkPlatform() {

        var bool x_eq;
        var bool y_eq;

        let x_eq = (ball.getX1() = platform.getX2()) | (ball.getX2() = platform.getX1());
        let y_eq = ball.getY2() = platform.getY1();

        if (((x_eq | (ball.getX2() > platform.getX1())) & y_eq) &
            ((x_eq | (ball.getX1() < platform.getX2())) & y_eq))
            { do ball.topBounce(); }
            
        return;
    }


    // PURPOSE: checks possible bounce between a brick and the ball
    // RETURNS: bool
    // CHANGES: ball movement direction
    method bool isBrickBounce(Brick brick) {

        var bool bounce;

        var bool x1_eq;
        var bool x2_eq;
        var bool y1_eq;
        var bool y2_eq;

        var bool x1_lesser;
        var bool y1_lesser;
        var bool x2_greater;
        var bool y2_greater;

        let bounce = false;
        
        let x1_eq = ball.getX1() = brick.getX2(); // left
        let x2_eq = ball.getX2() = brick.getX1(); // right
        let y1_eq = ball.getY1() = brick.getY2(); // bottom
        let y2_eq = ball.getY2() = brick.getY1(); // top

        let x1_lesser  = ball.getX1() < brick.getX2();
        let y1_lesser  = ball.getY1() < brick.getY2();
        let x2_greater = ball.getX2() > brick.getX1();
        let y2_greater = ball.getY2() > brick.getY1();

        if ((x1_lesser & y1_eq) & (x2_greater & y1_eq)) { let bounce = true; do ball.bottomBounce(); } // bottom side
        if ((x1_lesser & y2_eq) & (x2_greater & y2_eq)) { let bounce = true; do ball.topBounce(); }
        if ((x2_eq & y1_lesser) & (x2_eq & y2_greater)) { let bounce = true; do ball.leftBounce(); }
        if ((x1_eq & y1_lesser) & (x1_eq & y2_greater)) { let bounce = true; do ball.rightBounce(); }

        // bottom left corner
        if (x2_eq & y1_eq) {
            let bounce = true;
            if (ball.getDY() > 0) { do ball.leftBounce(); }
            else { do ball.bottomBounce(); }
        }

        // bottom right corner
        if (x1_eq & y1_eq) { 
            let bounce = true;
            if (ball.getDY() > 0) { do ball.rightBounce(); } 
            else { do ball.bottomBounce(); } 
        } 

        // upper left corner
        if (x2_eq & y2_eq) { 
            let bounce = true; 
            if (ball.getDY() < 0) { do ball.leftBounce(); }
            else { do ball.topBounce(); }
        }
        // upper right corner
        if (x1_eq & y2_eq) { 
            let bounce = true;
            if (ball.getDY() < 0) { do ball.rightBounce(); }
            else { do ball.topBounce(); } 
        }
        
        return bounce;
    }


    // PURPOSE: checks every brick in lob for possible break
    // CHANGES: ball movement direction, lob, memory
    method void checkBricks() {

        var int i;
        var int n;
        var Brick brick;

        let n = 0;
        let i = NUMBER_OF_BRICKS;

        while (n < i) {

            let brick = lob[n];

            if ( ~(brick = null) ) {
                if (isBrickBounce(brick)) {
                    do brick.erase();
                    do brick.dispose();
                    let lob[n] = null;
                }
            }

            let n = n + 1;
        }

        return;
    }


    // PURPOSE: runs brick breaker game
    method void run() {
        
        var char key;
        var bool started;
        var bool exit;

        let started = false;
        let exit = false;

        // TODO: NOTIFY PLAYER TO PRESS LEFT OF RIGHT ARROW

        // let player decide initial ball movement direction
        while (~started) {
            let key = Keyboard.keyPressed();
            if (key = 130) { let started = true; do ball.topBounce(); do ball.leftBounce(); }   // left arrow
            if (key = 132) { let started = true; do ball.topBounce(); do ball.rightBounce(); }  // right arrow
        }

        // main game loop
        while (~exit) {

            let key = Keyboard.keyPressed();

            do checkBorders();

            do checkPlatform();

            do checkBricks();
            
            do Sys.wait(20);
            
            do ball.move();

            if (key = 81)   { let exit = true; }                       // q
            if (key = 130)  { do platform.moveLeft(LEFT_BORDER); }     // left arrow
            if (key = 132)  { do platform.moveRight(RIGHT_BORDER); }   // right arrow

        }

        return;
    }


} // class