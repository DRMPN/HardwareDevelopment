

// PURPOSE: represents a moving platform that user controls
class Platform {

    // coordinates of a platform
    field int x, y;

    // size of a platform
    static int X_SIZE;
    static int Y_SIZE;

    // TODO
    // static int LEFT_BORDER, RIGHT_BORDER

    // movement speed of a platform
    static int SPEED;


    // PURPOSE: constructs a new platform with given coordinates
    // CHANGES: memory
    constructor Platform new(int Ax, int Ay) {
        
        let x = Ax;
        let y = Ay;

        let X_SIZE = 30;
        let Y_SIZE = 5;
        let SPEED = 4;
        
        do draw();
        
        return this;
    }

    
    // PURPOSE: getters
    // RETURNS: fields of current object
    method int getX() { return x; }
    method int getY() { return y; }

    
    // PURPOSE: cleans memory from Platform object
    // CHANGES: memory
    method void dispose() {
        do Memory.deAlloc(this);
        return;
    }

    
    // PURPOSE: draws platform on the screen
    // CHANGES: screen
    method void draw() {
        do Screen.setColor(true);
        do Screen.drawRectangle(x, y, x + X_SIZE, y + Y_SIZE);
        return;
    }


    // PURPOSE: erases platform from the screen
    // CHANGES: screen
    method void erase() {
        do Screen.setColor(false);
        do Screen.drawRectangle(x, y, x + X_SIZE, y + Y_SIZE);
        return;
    }


    // PURPOSE: moves platform to the left
    // CHANGES: x, screen

    // TODO: change draw logic to possible perfomance increase
    // TODO: probably move border check inside BrickBreakerGame

    method void moveLeft() {
        if (x > 2) {
            do erase();
            let x = x - SPEED;
            do draw();
        }
        return;
    }


    // PURPOSE: moves platform to the right
    // CHANGES: x, screen
    
    // TODO: change draw logic to possible perfomance increase
    // TODO: probably move border check inside BrickBreakerGame

    method void moveRight() {
        if (x + X_SIZE < 510) {
            do erase();
            let x = x + SPEED;
            do draw();
        }
        return;
    }

} // class