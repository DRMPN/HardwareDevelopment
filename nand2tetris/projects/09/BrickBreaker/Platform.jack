

// PURPOSE: represents a moving platform that user controls
class Platform {

    // coordinates of a platform
    field int x1, y1, x2, y2;

    // size of a platform
    static int X_SIZE;
    static int Y_SIZE;

    // movement speed of a platform
    static int SPEED;


    // PURPOSE: constructs a new platform with given coordinates
    // CHANGES: memory
    constructor Platform new(int Ax, int Ay) {

        do init();

        let x1 = Ax;
        let x2 = Ax + X_SIZE;

        let y1 = Ay;
        let y2 = Ay + Y_SIZE;

        do draw();
        
        return this;
    }


    // PURPOSE: initializes constants for a platform
    // CHANGES: constants
    method void init() {

        let X_SIZE = 30;
        let Y_SIZE = 5;
        let SPEED = 2;
        
        return;
    }


    // PURPOSE: getters
    // RETURNS: fields of a current object
    method int getX1() { return x1; }
    method int getX2() { return x2; }
    method int getY1() { return y1; }
    method int getY2() { return y2; }

    
    // PURPOSE: cleans memory from Platform object
    // CHANGES: memory
    method void dispose() {
        do Memory.deAlloc(this);
        return;
    }

    
    // PURPOSE: draws platform on the screen
    // CHANGES: screen
    method void draw() {
        do Screen.setColor(true);
        do Screen.drawRectangle(x1, y1, x2, y2);
        return;
    }


    // PURPOSE: erases platform from the screen
    // CHANGES: screen
    method void erase() {
        do Screen.setColor(false);
        do Screen.drawRectangle(x1, y1, x2, y2);
        return;
    }


    // PURPOSE: moves platform to the left
    // CHANGES: x, screen

    // TODO: POSSIBLE REFACTOR WITH BORDER CHECKS

    method void moveLeft(int left_border) {
        if ((x1 - 1) > left_border) {
            //do Screen.setColor(true);
            //do Screen.drawRectangle((x1 - SPEED), y1, x1, y2);
            //do Screen.setColor(false);
            //do Screen.drawRectangle((x2 - SPEED), y1, x2, y2);
            do erase();
            let x1 = x1 - SPEED;
            let x2 = x2 - SPEED;
            do draw();
        }
        return;
    }


    // PURPOSE: moves platform to the right
    // CHANGES: x, screen
        
    // TODO: POSSIBLE REFACTOR WITH BORDER CHECKS

    method void moveRight(int right_border) {
        if ((x2 + 1) < right_border) {
            //do Screen.setColor(true);
            //do Screen.drawRectangle(x2, y1, (x2+SPEED), y2);
            //do Screen.setColor(false);
            //do Screen.drawRectangle(x1, y1, (x1+SPEED), y2);
            do erase();
            let x1 = x1 + SPEED;
            let x2 = x2 + SPEED;
            do draw();
        }
        return;
    }


} // class