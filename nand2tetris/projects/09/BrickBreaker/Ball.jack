

// PURPOSE: represents a moving ball
class Ball {

    // Coordinates of a ball
    field int x, y;
    
    // Direction of ball movement
    // TODO: maybe enumeration like with directions
    field int dx, dy;

    // Radius of a ball
    static int RADIUS;

    // Speed of a ball
    static int SPEED;


    // PURPOSE: creates a new ball object with given coordinates
    // CHANGES: memory
    constructor Ball new(int Ax, int Ay) {

        do init();

        let x = Ax;
        let y = Ay;
        
        let dx = SPEED;
        let dy = SPEED;

        do draw();

        return this;
    }


    // PURPOSE: initializes constants for a ball
    // CHANGES: constants
    method void init() {

        let RADIUS = 3;
        let SPEED = 4;

        return;
    }


    // PURPOSE: getters
    // RETURNS: fields of current object
    method int getX() { return x; }
    method int getY() { return y; }


    // PURPOSE: frees memory from the ball
    // CHANGES: memory
    method void dispose() {
        do Memory.deAlloc(this);
        return;
    }


    // PURPOSE: draws ball at the current position on the screen
    // CHANGES: screen
    method void draw() {
        do Screen.setColor(true);
        do Screen.drawCircle(x, y, RADIUS);
        return;
    }


    // PURPOSE: erases ball at the current position from the screen
    // CHANGES: screen
    method void erase() {
        do Screen.setColor(false);
        do Screen.drawCircle(x, y, RADIUS);
        return;
    }


    // PURPOSE: checks whether ball is near screen borders or not
    //          changes direction of ball movement
    // CHANGES: dx dy
    method void checkBorderBounce(int left_border, int right_border, int top_border, int bottom_border) {
        if ( (x - RADIUS) < left_border) { let dx = SPEED; }    // left border
        if ( (x + RADIUS) > right_border) { let dx = -SPEED; }  // right border

        if ( (y - RADIUS) < top_border) { let dy = SPEED; }     // top border
        if ( (y + RADIUS) > bottom_border) { let dy = -SPEED; } // bottom border
        return;
    }


    // PURPOSE: changes ball movement direction if bounced from the platform 
    // CHANGES: dy

    // TODO: think more closely

    method void platformBounce() {
        let dy = -SPEED;
        return;
    }


    // PURPOSE: changes ball movement direction if bounced from a brick
    // CHANGES: dy
    method void brickBounce() {
        let dy = SPEED;
        return;
    }


    // PURPOSE: moves ball and displays it on the screen
    // CHANGES: x y

    // TODO: better draw/erase performance

    method void move(int left_border, int right_border, int top_border, int bottom_border) {
        
        do erase();

        do checkBorderBounce(left_border, right_border, top_border, bottom_border);

        let x = x + dx;
        let y = y + dy;

        do draw();

        return;
    }

} // class