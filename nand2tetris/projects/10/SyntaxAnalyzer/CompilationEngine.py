

# Effects the actual compilation output. Gets its input from a JackTokenizer 
#   and emits its parsed structure into an output file/stream. The output 
#   is generated by a series of compilexxx() routines, one for every syntactic
#   element xxx of the Jack grammar. The contract between these routines is that each
#   compilexxx() routine should read the syntactic construct xxx from the input,
#   advance() the tokenizer exactly beyond xxx, and output the parsing of xxx. Thus,
#   compilexxx() may only be called if indeed xxx is the next syntactic element of the input.

class CompilationEngine():
    

    # PURPOSE:  Creates a new compilation engine with the given input and output.
    #           The next routine called must be compileClass().
    def __init__(self, input, output) -> None:
        pass


    # CompileClass
    # CompileClassVarDec
    # CompileSubroutine
    # compileParameterList
    # compileVarDec
    # compileStatements
    # compileDo
    # compileLet
    # compileWhile
    # compileReturn
    # compileIf
    # CompileExpression
    # CompileTerm
    # CompileExpressionList